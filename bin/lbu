#!/usr/bin/env ruby

require "bundler/setup"
require "luna-binary-uploader"
require 'gli'

# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

# (If you use this, don't forget to add pry to your Gemfile!)
# require "pry"
# Pry.start

class App
    extend GLI::App
  
    program_desc 'luna-binary-uploader 自定义二进制上传'
  
    version Luna::Binary::Uploader::VERSION
  
    subcommand_option_handling :normal
    arguments :strict
  
    desc '初始化二进制配置repo代码'
    arg_name 'url地址'
    command :init do |c|
      c.action do |global_options,options,args|
        help_now!('url is required') if args.empty?
        Luna::Binary::Init.new(args[0])
      end
    end


    desc '对pod install封装，一键开关二进制'
    arg_name ''
    command :install do |c|
      c.desc '是否需要二进制, 不需要的话 -n or --no'
      c.switch [:n,:no]
      c.action do |global_options,options,args|
        if options[:no]
          is_open = "false"
        else
          is_open = "true"
        end
        Luna::Binary::Install.new(is_open)
      end
    end

    desc '单个上传二进制文件'
    arg_name 'a.模块名 git地址 git节点 xcode编译的缓存地址 \n b.模块名 版本号 xcode编译的缓存地址 \n c.模块名 本地podspec地址 xcode编译的缓存地址'
    command :single do |c|
      c.action do |global_options,options,args|
        if args[3] #模式1
          Luna::Binary::Uploader::SingleUploader.new(args[0],args[1],args[2], args[3]).upload
        else 
          moduleName = args[0]
          args1 = args[1]
          binaryPath= args[2]
          version = args1
          if File.exist?(args1)
            spec = Pod::Specification.from_file(Pathname.new(args1))
            uploader = Luna::Binary::Uploader::SingleUploader.new(moduleName, "", "", binaryPath)
            uploader.specification=spec
            uploader.upload
          else 
            set = Luna::Binary::Common.instance.findLintPodspec(moduleName)
            if set 
                pathArr = set.specification_paths_for_version(Pod::Version.new(version))
                if pathArr.length > 0
                    spec = Pod::Specification.from_file(pathArr.first)
                    uploader = Luna::Binary::Uploader::SingleUploader.new(moduleName, "", "", binaryPath)
                    uploader.specification=spec
                    uploader.upload
                else 
                  raise "没有找到#{moduleName}"
                end
            else 
              Luna::Binary::Uploader::SingleUploader.new(args[0],args[1],args[2], args[3]).upload
            end
          end
          
        end
       
        
      end
    end

    desc '单个删除repo 里的podspec & 服务二进制文件'
    arg_name '1.模块名 2.版本号'
    command :del do |c|
      c.action do |global_options,options,args|
        help_now!('args is required') if args.empty?
        help_now!('模块名是需要的') if args[0] == nil
        help_now!('版本号是需要的') if args[1] == nil
        Luna::Binary::Delete.new(args[0],args[1]).delete
      end
    end

    desc '根据Podfile.lock进行解析成对应的podspec.json并拷贝对应的framework到一个文件夹内，如果第三个参数传upload，则表示分析出的podspec和framework自动上传'
    arg_name '参数:1.二进制路径(可以不传默认为当前目录下的/temp-luna-uploader/merged) 2.用的话必传upload 可以不传，如果传表示分析完直接打包上传'
    command :analysis do |c|
      c.action do |global_options,options,args|
        obj = Luna::Binary::Analysis.new()
        if args[0] != nil
          obj.binary_path = args[0]  
        else
          obj.binary_path = Luna::Binary::Common.instance.binary_path_merged
        end
        obj.need_upload = args[1]
        obj.run
      end
    end

    desc '仅仅更新服务的framwork，podfile带有标志位的:dev_env_use_binary的模块framework，通常解决xcode升级导致framework swift 版本问题'
    arg_name '参数:1.二进制路径(可以不传默认为当前目录下的/temp-luna-uploader/merged)'
    command :refresh do |c|
      c.desc '是否需要build, 不需要的话 -n or --no'
      c.switch [:n,:no]
      c.action do |global_options,options,args|
        if options[:no]
          obj = Luna::Binary::Refresh.new()
          if args[0] != nil
            obj.binary_path = args[0]
          else
            obj.binary_path = Luna::Binary::Common.instance.binary_path_merged
          end
          obj.run
        else
          help_now!('args is required') if args.empty?
          help_now!('workspace is required') if args[0] == nil
          help_now!('scheme is required') if args[1] == nil
          build = Luna::Binary::Build.new()
          build.workspace=args[0]
          build.scheme=args[1]
          if build.run
            obj = Luna::Binary::Refresh.new()
            obj.binary_path = Luna::Binary::Common.instance.binary_path_merged
            obj.run
          end
        end

      end
    end

    desc 'build项目并合成带有arm64&x86的framework'
    arg_name '1.xcworkspace 名称 eg:MyWorkSpace.xcworkspace 2.scheme eg: MyProject'
    command :build do |c|
      c.action do |global_options,options,args|
        help_now!('args is required') if args.empty?
        help_now!('workspace is required') if args[0] == nil
        help_now!('scheme is required') if args[1] == nil
        obj = Luna::Binary::Build.new()
        obj.workspace=args[0]
        obj.scheme=args[1]
        obj.run
      end
    end

    desc '合成带有arm64&x86的framework'
    arg_name '1.armPath 2.x86path'
    command :merge do |c|
      c.action do |global_options,options,args|
        help_now!('args is required') if args.empty?
        help_now!('armPath is required') if args[0] == nil
        help_now!('x86path is required') if args[1] == nil
        obj = Luna::Binary::Build.new()
        obj.mergeFrameWorks(args[0], args[1])
      end
    end

    desc 'benchmark 二进制和非二进制'
    arg_name '1.跑工程几次 2.workspace 3.scheme 4.normal正常模式下 binary二进制模式下，不传的话都跑'
    command :benchmark do |c|
      c.action do |global_options,options,args|
        help_now!('args is required') if args.empty?
        help_now!('workspace is required') if args[0] == nil
        help_now!('scheme is required') if args[1] == nil
        obj = Luna::Binary::BenchMark.new(Integer(args[0]), args[1], args[2])
        if args[3] == "normal"
          obj.run_no_binary
        elsif args[3] == "binary"
          obj.run_binary
        else
          obj.run
        end
        obj.print
      end
    end

    desc '二进制build完自动将podfile标记的需要二进制的，进行打包上传'
    arg_name 'workspace 名称 eg:MyWorkSpace.xcworkspace 2.scheme eg: MyProject'
    command :publish do |c|
      c.desc '是否需要build, 不需要的话 -n or --no'
      c.switch [:n,:no]
      c.action do |global_options,options,args|
        if options[:no]
          update = Luna::Binary::Update.new()
          if args[0] != nil
            update.binary_path = args[0]
          else
            update.binary_path = Luna::Binary::Common.instance.binary_path_merged
          end
          update.run
        else
          help_now!('workspace is required') if args[0] == nil
          help_now!('scheme is required') if args[1] == nil
          build = Luna::Binary::Build.new()
          build.workspace=args[0]
          build.scheme=args[1]
          if build.run
            update = Luna::Binary::Update.new()
            update.binary_path = Luna::Binary::Common.instance.binary_path_merged
            update.run
          end
        end
      end
    end

    pre do |global,command,options,args|
      # Pre logic here
      # Return true to proceed; false to abort and not call the
      # chosen command
      # Use skips_pre before a command to skip this block
      # on that command only
      true
    end
  
    post do |global,command,options,args|
      # Post logic here
      # Use skips_post before a command to skip this
      # block on that command only
    end
  
    on_error do |exception|
      # Error logic here
      # return false to skip default error handling
      true
    end
  end
  
  exit App.run(ARGV)