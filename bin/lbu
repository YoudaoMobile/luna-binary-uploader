#!/usr/bin/env ruby

require "bundler/setup"
require "luna/binary/uploader"
require "luna/binary/delete"
require "luna/binary/analysis"
require "luna/binary/refresh"
require "luna/binary/build"
require "luna/binary/update"
require 'gli'

# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

# (If you use this, don't forget to add pry to your Gemfile!)
# require "pry"
# Pry.start

class App
    extend GLI::App
  
    program_desc 'luna cocopods-imy-bin自定义二进制上传'
  
    version Luna::Binary::Uploader::VERSION
  
    subcommand_option_handling :normal
    arguments :strict
  
    desc 'Describe some switch here'
    switch [:s,:switch]
  
    desc 'Describe some flag here'
    default_value 'the default'
    arg_name 'The name of the argument'
    flag [:f,:flagname]
  
    desc 'Describe list here'
    arg_name 'Describe arguments to list here'
    command :list do |c|
      c.desc 'Describe a switch to list'
      c.switch :s
  
      c.desc 'Describe a flag to list'
      c.default_value 'default'
      c.flag :f
      c.action do |global_options,options,args|
  
        # Your command logic here
  
        # If you have any errors, just raise them
        # raise "that command made no sense"
  
        puts "list command ran"
      end
    end
  
    desc '单个上传二进制文件'
    arg_name '1.模块名 git地址 git节点 xcode编译的缓存地址 \n 2.模块名 版本号 xcode编译的缓存地址 \n 3.模块名 本地podspec地址 xcode编译的缓存地址'
    command :single do |c|
      c.action do |global_options,options,args|
        if args[3] #模式1
          Luna::Binary::Uploader::SingleUploader.new(args[0],args[1],args[2], args[3]).upload
        else 
          moduleName = args[0]
          args1 = args[1]
          binaryPath= args[2]
          version = args1
          if File.exist?(args1)
            spec = Pod::Specification.from_file(Pathname.new(args1))
            uploader = Luna::Binary::Uploader::SingleUploader.new(moduleName, "", "", binaryPath)
            uploader.specification=spec
            uploader.upload
          else 
            set = Luna::Binary::Common.instance.findLintPodspec(moduleName)
            if set 
                pathArr = set.specification_paths_for_version(Pod::Version.new(version))
                if pathArr.length > 0
                    spec = Pod::Specification.from_file(pathArr.first)
                    uploader = Luna::Binary::Uploader::SingleUploader.new(moduleName, "", "", binaryPath)
                    uploader.specification=spec
                    uploader.upload
                else 
                  raise "没有找到#{moduleName}"
                end
            else 
              Luna::Binary::Uploader::SingleUploader.new(args[0],args[1],args[2], args[3]).upload
            end
          end
          
        end
       
        
      end
    end

    desc '单个删除repo 里的podspec & 服务二进制文件'
    arg_name '模块名 版本号'
    command :del do |c|
      c.action do |global_options,options,args|
        Luna::Binary::Delete.new(args[0],args[1]).delete
      end
    end

    desc '根据Podfile.lock进行解析成对应的podspec.json并拷贝对应的framework到一个文件夹内，如果第三个参数传upload，则表示分析出的podspec和framework自动上传'
    arg_name '参数:1.二进制路径(可以不传默认为当前目录下的/temp-luna-uploader/merged) 2.用的话必传upload 可以不传，如果传表示分析完直接打包上传'
    command :analysis do |c|
      c.action do |global_options,options,args|
        obj = Luna::Binary::Analysis.new()
        if args[0] != nil
          obj.binary_path = args[0]  
        else
          obj.binary_path = Luna::Binary::Common.instance.binary_path_merged
        end
        obj.need_upload = args[1]
        obj.run
      end
    end

    desc '仅仅更新服务的framwork，podfile带有标志位的:dev_env_use_binary的模块framework，通常解决xcode升级导致framework swift 版本问题'
    arg_name '参数:1.二进制路径(可以不传默认为当前目录下的/temp-luna-uploader/merged)'
    command :refresh do |c|
      c.action do |global_options,options,args|
          obj = Luna::Binary::Refresh.new()
          if args[0] != nil
            obj.binary_path = args[0]  
          else
            obj.binary_path = Luna::Binary::Common.instance.binary_path_merged
          end
          obj.run
      end
    end

    desc '检查并上传带有标记:dev_env_use_binary的模块，上传repo和framework'
    arg_name '参数:1.二进制路径(可以不传默认为当前目录下的/temp-luna-uploader/merged)'
    command :update do |c|
      c.action do |global_options,options,args|
          obj = Luna::Binary::Update.new()
          if args[0] != nil
            obj.binary_path = args[0]  
          else
            obj.binary_path = Luna::Binary::Common.instance.binary_path_merged
          end
          obj.run
      end
    end

    desc 'build项目并合成带有arm64&x86的framework'
    arg_name '1.xcworkspace 名称 eg:MyWorkSpace.xcworkspace 2.scheme eg: MyProject'
    command :build do |c|
      c.action do |global_options,options,args|
          obj = Luna::Binary::Build.new()
          obj.workspace=args[0]
          obj.scheme=args[1]
          obj.run
      end
    end

    desc '合成带有arm64&x86的framework'
    arg_name '1.armPath 2.x86path'
    command :merge do |c|
      c.action do |global_options,options,args|
          obj = Luna::Binary::Build.new()
          obj.mergeFrameWorks(args[0], args[1])
      end
    end

    pre do |global,command,options,args|
      # Pre logic here
      # Return true to proceed; false to abort and not call the
      # chosen command
      # Use skips_pre before a command to skip this block
      # on that command only
      true
    end
  
    post do |global,command,options,args|
      # Post logic here
      # Use skips_post before a command to skip this
      # block on that command only
    end
  
    on_error do |exception|
      # Error logic here
      # return false to skip default error handling
      true
    end
  end
  
  exit App.run(ARGV)